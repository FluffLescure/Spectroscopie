Classe Config :
- - - - - - - - - - - -
Auteur : Lucas Lescure

Nom de la classe : Config

Description : Un singleton qui stock les configurations globales du jeu de sorte qu'il puisse 
partager ces configurations avec d'autres classes externes sans nécessiter une relation 
explicite. 

Note : Cette classe est faite pour être appelée à partir d'un instance partégée et statique.

Remarque : Cela permet de charger les configuration des configs, telle que les textures et la mise en page 
qu'une seule fois.

En outre, il améliore la lisibilité du code en stockant les configurations globales en un seul endroit, 
ce qui évite d'encombrer les classes avec un trop grand nombre de membres constants.

La classe est unique en ce sens qu'elle ne peut être ni copiée ni reconstruite puisqu'elle 
fonctionne comme un singleton.

Elle peut être appelée en récupérant l'instance de la classe à l'aide de la méthode getInstance().  
Cette instance peut ensuite être stockée dans un pointeur de classe pour de multiples appels de configuration.

Exemple d'utilisation : 
// Stocke l'instance dans un pointeur « config » en vue d'appels répétés de paramètres.
Config* config = Config::getInstance();

// Les membres partagés de Config sont accessibles à l'aide du pointeur d'instance 
printf("Title: %s \nFramerate: %d",config->window_title, config->window_framerate);

// Utilisé pour les appels uniques ne nécessitant pas de pointeur pour stocker l'instance
Vector2i Size = Config::getInstance()->window_size;
- - - - - - - - - - - -


Classe GameGrid :
- - - - - - - - - - - -
Auteur : Tom Paillet

Nom de la classe : GameGrid

Description : Grille en 2D faite avec des LetterBlocks qui forment la grille de jeu. 

Remarque : C'est ici que la majeure partie du jeu est contrôlée en traitant les données 
du jeu avec les classes correspondantes

Les dimensions de la grille sont trouvées dans Config.

L'agrégation avec Input et GameWordle est utilisée pour récupérer les données de l'utilisateur 
et déterminer quels blocs - formant un mot valide - doivent être détruits. D'autres agrégations 
sont utilisées comme composants connexes qui communiquent avec la grille de jeu pour produire 
les valeurs de jeu correctes.
- - - - - - - - - - - -


Classe GameLetter :
- - - - - - - - - - - -
Auteur : Tom Paillet

Nom de la classe : GameLetter

Description : Tire la lettre suivante au hasard et l'affiche dans l'emplacement prévu sur le côté du jeu.
La lettre sera ensuite récupérée par la grille, auquel cas une nouvelle lettre aléatoire est alors chargée.  

Remarque : La classe permet une randomisation simple avec des getters et des setters.
Exemple d'utilisation :
GameLetter next = GameLetter();  // initialise avec une lettre aléatoire

char c = next->getLetter();      // récupère la lettre actuellement affichée

c = next->randLetter();          // renvoie une lettre aléatoire

next->changeLetter();            // randomise la lettre affichée
- - - - - - - - - - - -


Classe GameLevel :
- - - - - - - - - - - -
Auteur : Lucas Lescure
Nom de la classe : GameLevel

Description : Une classe qui gère le niveau et l'étape du jeu. La vitesse du jeu est accélérée au proportionellement au score actuel.

Remarque : La vitesse du jeu est accélérée au proportionellement au score actuel.
Il modifie également la palette de couleurs en fonction de l'étape.


Exemple de code :
GameLevel level = GameLevel();

// Affiche le niveau et l'étape
level.render(window);

// Augmente le niveau et met à jour le stage conséquemment.
level.levelUp();

// Récupère la vitesse du jeu
int speed = level.getSpeed();
- - - - - - - - - - - -

 Classe GameLogs :
- - - - - - - - - - - -
Auteur : Tom Paillet

Nom de la classe : GameLogs

Description : Stocke et affiche l'historique des mots ainsi que les points gagnés par chacun d'entre eux 
dans deux colonnes.

Remarque : La colonne des points est alignée à gauche et l'historique contient 10 mots maximum.

Exemple de code :
GameLogs logs = GameLogs();          // initialise les composants avec un historique vide
logs->emplace("new text");           // place le mot en haut avec le score correspondant
logs->emplaceLog("newer text");      // place le mot en haut sans mise à jour du score
logs->emplacePoints("newest text")   // palce le score en haut sans mise à jour du texte
- - - - - - - - - - - -

Classe GameScore :
- - - - - - - - - - - -
Auteur : Lucas Lescure

Classe : GameScore

Description : Une classe qui gère et affiche le score du jeu. 
Il permet d'afficher le meilleur score ainsi que le score actuel, sauver et charger les scores 
avec un fichier texte et aussi de donner la valeur d'un mot.
- - - - - - - - - - - -

Classe Input :
- - - - - - - - - - - -
Auteur : Tom Paillet

Nom de la classe : Input

Description : Récupère les actions faites par le joueur.

Remarque : Cette classe récupère les évènements (actions de l'utilisateur) qui se produisent 
à l'aide de la méthode pollEvent()et stocke l'entrée dans le membre input_. 
Cette direction peut ensuite être récupérée avec la méthode getInput()
- - - - - - - - - - - -

Classe LetterBlock :
- - - - - - - - - - - -
Auteur : Lucas Lescure

Nom de la classe : LetterBlock

Description : Bloc contenant une lettre qui est utilisé en grille afin de créer des mots.

Note : La taille par défaut est 33.6x32.4 comme spécifié dans Config

Remarque : Permet des opérations simples tel que cacher le bloc et changer la couleur de remplissage.
Exemple de code :
LetterBlock block();            // Initialisé par défaut à 33.6x32.4px avec comme texte un espace (' ')
block.display(false);           // cache le bloc (alpha = 0)

Les fonctions get et set permettent de récupérer ou modifier des données.
Exemple de code :
LetterBlock block('A');                      // Crée un bloc de 33.6x32.4 avec un A

char letter = block.getLetter();             // Copie l'attibut 'letter'
block.setLetter('B');                        // Mets la lettre à 'B'
block.setPosition({0,0});                    // Change la position du LetterBlock
block.setState(State::Falling);              // Change l'état du bloc
if (block.isState(State::Falling)) {         // Vérifie l'état du bloc
     block.setColor(sf::Color::Red)          // Change la couleur de remplsisage du bloc
}
if (block.isHidden()) {                      // Vérifie si le bloc est caché
     block.getPosition(grid);                // Renvoi la position du bloc
}
State state = block.getState();              // Récupère l'état du bloc
sf::RectangleShape rect = block.getBlock();  // Récupère une copie de l'attribut du bloc

Pour son utilisation dans un grille 2D, une surcharge de l'opérateur '=' a été faite pour 
changer les propriétés d'un bloc à l'autre, permettant ainsi d'avoir une illusion de déplacement 
sans le déplacer graphiquement.

Exemple de code :
LetterBlock block1('A');
Letterblock block2('B');
block1.setColor(sf::Color::Black);
block2.setColor(sf::Color::Red);
block1 = block2                      // les propriétés de block2 sont transférées au block1
- - - - - - - - - - - -


Classe MainGame :
- - - - - - - - - - - -
Auteur : Lucas Lescure
Nom de la classe : MainGame
Description : Utilisé pour afficher les différents éléments du jeu.

Remarque : La fonction principale de cette classe est d'afficher et de mettre à jour 
chaque élément du jeu avec un lien d'aggrégation et les méthodes render() et update().
La méthode update est utilisée pour les modifications non visuelles tandis que render()
n'est utilisée que pour les modifications graphiques.
- - - - - - - - - - - -


Classe Wordle:
- - - - - - - - - - - -
Auteur : Tom Paillet

Nom de la classe : Wordle

Description : Permet de détecter les mots dans une combinaison de caractères à 
partir d'une "map" de mots créée à partir d'un dictionnaire.
- - - - - - - - - - - -